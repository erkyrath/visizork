# Game commentary source.

ABOUT: Welcome to the commentary track!

const:ZORK-NUMBER: The number of the Zorks shall be one.
	(“Three, sir!”)
	Yes, but *this* one is... one.

rtn:V-VERSION: Print the title, release, and serial number.
	This function is shared between all three Zorks, which is why it has code to print all three titles. The passages meant for Zork 2 and 3 were ignored when compiling Zork 1. (Skipped code is shown in grey.)

src:GVERBS-90: The TRS-80 interpreter set a special bit which told the game to change certain behavior for no-doubt-contractual reasons. For Zork 1, it adds the line “Licensed to Tandy Corporation”, and also skips [mentioning Zork 2/3|~src:1ACTIONS-390] at the end.
	For a complete list of “Tandy bit” behavior changes in Infocom games, [see this page|https://ifarchive.org/if-archive/infocom/info/tandy_bits.html].

src:1ACTIONS-390: On the TRS-80, this skips mentioning Zork 2/3. See [V-VERSION|*src:GVERBS-90].

objtree-legend: In this list, `Rooms` are rooms and `Items` are regular items. (Sometimes portable, sometimes not.)
	`Scen` indicates scenery objects. These exist in multiple places; for example, the [~obj:WHITE-HOUSE] is visible from many outdoor locations. Sometimes as “You can’t see that from here”, but it’s the same object.
	`Glob` indicates a global object, which is *always* visible, or at least mentionable. For example, [~obj:GRUE] is global – not because grues are always present, but so you can always ask `WHAT IS A GRUE`.

obj:local-globals: This is a container for scenery objects like [~obj:WHITE-HOUSE], which are visible from many locations in the game.

src:gglobals-26: This refers to the word `ZZMGCK` in [~obj:local-globals], above.
	Why is this synonym necessary? Does it need to be alphabetically last? Not clear! Most Infocom games have it (or a variation), but some say “No, this synonym doesn’t need to exist” instead.
	If you type `EXAMINE ZZMGCK`, the parser finds [~obj:local-globals]. But that object is nameless, so you get a garbage reply. Go on, try it.

obj:adventurer: Yes, the player’s printed name is “cretin”, although the game rarely says so. (The death message for `BURN BOOK` mentions it.) This sort of sarcastic insult hasn’t aged too well, but MIT culture had a lot of it. Compare [*glob:WINNER], and also the old MIT [Jargon File|https://jargon-file.org/archive/jargon-1.0.0.33.dos.txt].
	Note that if you refer to `ME` (or `CRETIN`), you get the [*obj:ME] global object, not the `ADVENTURER`.

obj:me: A global object which is always in scope. Commands referring to `ME` hit this, rather than [*obj:ADVENTURER], which is a stub that moves around the map.
	Because of this, parser messages mostly refer to you as “you”, even though the [*obj:ADVENTURER]’s printed name is “cretin”.

glob:player: `PLAYER` is always the [~obj:ADVENTURER]. Compare [*glob:WINNER].

glob:winner: `WINNER` is the actor in the current command. (Compare [*glob:PLAYER].) 
	`WINNER` is usually [~obj:ADVENTURER], but for a command like `ROBOT, GO EAST` it shifts to the named NPC. (But Zork 1 has no commandable NPCs, so this doesn’t come up.)
	“Winner” is just as sarcastic as “[*cretin|obj:adventurer]”, but from the other side.

glob:here: The location of the [*glob:WINNER].

glob:lit: Whether the current location has light.

glob:sprayed?: Whether you’ve been sprayed with grue repellant. Sadly, there won’t be any grue repellant until Zork 2, so this will never be set.

src:GVERBS-1593: Not until Sorcerer!


glob:c-ints: Indicates how much of the timer table ([*glob:C-TABLE]) is used. This counts down from `C-TABLELEN`, which is 180.

glob:c-table: The timer table. See the “Timers” tab for a current listing.

timers-legend: A list of the timers running (or paused) in the timer table ([~glob:C-TABLE]). This list only grows as you play; timers can be added, started, and stopped, but not removed.
	The [~rtn:I-LANTERN] and [~rtn:I-CANDLES] timers count down to the next dimming stage. Note that the candles politely don’t start counting until you pick them up.
	The [~rtn:I-THIEF] and [~rtn:I-SWORD] timers start at -1, meaning they run “forever”. (The sword runs when you are holding it; the thief runs until you kill him.) In fact they will probably stop working after 65535 turns, but back then nobody tried this!

glob:c-demons: Indicates how much of the timer table is used for daemons. The difference between daemons and timers is that timers run every turn; daemons run every *input*, even if no turn passes. But Zork does not use daemons.

glob:p-won: Set if the parser successfully parsed a command. (As opposed to a blank line or an error.)
	No relation to whether the *player* has won; that’s [*glob:WON-FLAG].

glob:won-flag: Set when you reach 350 points. See [rtn:SCORE-UPD].
	Oddly, this global is defined in two places in the source. See [gverbs.zil|~src:GVERBS-1743].

src:GVERBS-1743: This global is also defined in [1dungeon.zil|*glob:won-flag]. The compiler seems to have been okay with this.

glob:lucky: Set false if you break a mirror. Yes, this hurts probability checks; see [~rtn:ZPROB].
	Oddly, this global is defined in two places in the source. See [1actions.zil|~src:1ACTIONS-940]. (Don’t worry, `T` and `1` are the same value.)
	
src:1ACTIONS-940: This global is also defined in [gverbs.zil|*glob:lucky]. The compiler seems to have been okay with this. (Don’t worry, `T` and `1` are the same value.)

rtn:score-upd: Increases (or decreases) your score. Also checks whether you’ve reached 350, which sets [glob:WON-FLAG] and unlocks the secret [~obj:MAP] and the [~obj:STONE-BARROW].

glob:lamp-table: This table shows the successive stages of the lamp going out. The *first* stage is 200 turns, which is set in [~rtn:GO], not here.

rtn:GO: Set up the world at the start of the game. Start the timers. Print the banner. Set all those useful globals like [~glob:HERE] and [~glob:PLAYER].


glob:house-around: If you type `WALK AROUND HOUSE` while standing near the house, this table takes you in a neat circle around it.

glob:in-house-around: If you type `WALK AROUND HOUSE` while standing *inside* the house... it doesn't work because the [~obj:WHITE-HOUSE] scenery object isn't visible. There's a [bit of code|~src:1ACTIONS-93] which wants to use this table but it never runs.

glob:forest-around: If you type `WALK AROUND FOREST` while in the forest, this table takes you for a nice (non-random) ramble.

glob:above-ground: If you die, your possessions are scattered above ground according to this table. See [rtn:RANDOMIZE-OBJECTS].

rtn:RANDOMIZE-OBJECTS: If you die, your possessions are scattered above ground. Except for the lamp (always found in the [~obj:LIVING-ROOM]) and the coffin (returned to the [~obj:EGYPT-ROOM]).

obj:mountains: The game scale gets a bit loose here.

obj:kitchen: The `DOWN` exit implies that you *could* go down if [~glob:FALSE-FLAG] were true, but of course it never is. In fact `FALSE-FLAG` has no other use in the game but blocking this exit. It’s not clear why it’s set up this way, rather than an unconditional failure message.
	(Possibly so the sword will glow if the thief is passing through the [~obj:STUDIO] below? But the thief is normally `INVISIBLE` and does not trigger the sword.)
	This has the side effect that `JUMP` in the Kitchen is fatal. See [V-LEAP|*src:GVERBS-769].

obj:garlic: Who carries around one clove of garlic? As a kid, I assumed this was a *head* of garlic, which left me permanently confused about what “clove” meant. Thanks Zork.

obj:songbird: The songbird is always present but never in reach. Except when using the [~obj:CANARY], and even then the bird flies away before you can interact with it.

obj:teeth: Why teeth? Because you can `BRUSH TEETH`, which isn’t interesting, but then you can `BRUSH TEETH WITH GUNK`, because the tube is described as “like a tube of toothpaste”. Spoiler: it’s a bad idea.

obj:granite-wall: This object is global, but the granite wall is described as being between the [~obj:NORTH-TEMPLE] and the [~obj:TREASURE-ROOM]. And then the [~obj:SLIDE-ROOM] has the *words* “Granite Wall”.
	What’s going on? Well, it turns out that you can transport yourself through the granite wall. Typing the magic word `TREASURE` (or `TEMPLE`) will move you from the `NORTH-TEMPLE` to the `TREASURE-ROOM` and back. This is completely ridiculous as a puzzle – *nobody* figures it out – so it’s good that there are two other ways to get past the [~obj:CYCLOPS].

rtn:v-treasure: A very obscure magic word. See [*obj:granite-wall].

rtn:CELLAR-FCN: Who slams the trap door on you, anyhow? It must be the thief, the only mobile NPC in the game. But the thief is never seen above ground. And (to be really persnickety) the trap door slams even after the thief is dead.
	Really, we should assume it’s the Dungeon Master, who has a vested interest in your underground quest.

obj:chimney: This is one of several places where the MIT kids used caving jargon without quite conveying that they knew what it meant. A “[climbable chimney|~rtn:CHIMNEY-F]” would have meant something very different to Will and Patricia Crowther.

obj:bones: The idea of encountering your earlier self’s luckless corpse will reappear in *Trinity*.

obj:lowered-basket: The object names are misleading. `RAISED-BASKET` represents the basket at *this* end of the shaft, where you can interact with it. `LOWERED-BASKET` represents the basket at the *other* end of the shaft. When you raise or lower the basket, the two objects swap places.

rtn:maze-diodes: This function defines one-way down-crawls in the maze. (Diodes are electrical components that pass current only one way.)

obj:maze-1: Everybody loves a maze.
	[Enter the maze|com-maze-1]?

com-maze-1: You are in a maze of twisty little passages, all different.
	You can go [north|com-maze-11], [east|com-maze-9], [west|com-maze-10], [northwest|com-maze-8], or [up|com-maze-7].

com-maze-2: You are in a little maze of twisting passages, all different.
	You can go [south|com-maze-12], [northwest|com-maze-6], [southwest|com-maze-3], [southeast|com-maze-7], or [up|com-maze-11].

com-maze-3: You are in a maze of twisting little passages, all different.
	You can go [east|com-maze-2], [northeast|com-maze-7], [southeast|com-maze-4], or [up|com-maze-8].

com-maze-4: You are in a little maze of twisty passages, all different.
	You can go [north|com-maze-5], [northeast|com-maze-9], [southwest|com-maze-8], or [up|com-maze-3].

com-maze-5: You are in a twisting maze of little passages, all different.
	You can go [north|com-maze-9], [west|com-maze-4], [northeast|com-maze-6], or [northwest|com-maze-10].

com-maze-6: You are in a twisting little maze of passages, all different.
	You can go [west|com-maze-11], [southeast|com-maze-5], [southwest|com-maze-2], or [up|com-maze-10].

com-maze-7: You are in a twisty little maze of passages, all different.
	You can go [north|com-maze-1], [west|com-maze-8], [northeast|com-maze-10], [southeast|com-maze-3], or [up|com-maze-2].

com-maze-8: You are in a twisty maze of little passages, all different.
	You can go [east|com-maze-1], [west|com-maze-3], [south|com-maze-7], [northwest|com-maze-9], or [up|com-maze-4].

com-maze-9: You are in a little twisty maze of passages, all different.
	You can go [north|com-maze-8], [south|com-maze-4], [southwest|com-maze-10], [southeast|com-maze-1], or [down|com-maze-5].

com-maze-10: You are in a maze of little twisting passages, all different.
	You can go [west|com-maze-6], [southeast|com-maze-9], [southwest|com-maze-11], [up|com-maze-5], or [down|com-maze-1].

com-maze-11: You are in a maze of little twisty passages, all different.
	You can go [north|com-maze-6], [south|com-maze-10], [northeast|com-maze-2], [southwest|com-maze-1], or [down|com-maze-7].

com-maze-12: You have reached a dead end. There is a massive vending machine here.
	[Press the button|BATTERIES] to receive fresh batteries for your lantern!

batteries: Your lantern is now refreshed.
	(Take a look at the “Timers” tab.)

obj:dam-room: The reservoir is underground (dark), but the dam and the river downstream are sunlit. (You can tell by the [~obj:RAINBOW], and also by not needing a light source.) This is hard to visualize.
	In MIT Zork, the [~obj:CANYON-VIEW] says “I can discern the top of the Flood Control Dam #3 far to the distant north.” By this version that has changed to “The mighty Frigid River flows out from a great dark cavern,” thus hanging a lantern on the problem.

obj:canyon-view: The mighty Frigid River runs aboveground until it doesn’t. See [*obj:DAM-ROOM].

obj:atlantis-room: A very evocative room considering that the only detail is the [~obj:trident]’s description! I always imagined Byzantine undersea murals, but that was just me.
	The text implies that the room was exposed when you drained the reservoir, which is not really true. (You can check this by arriving by [mirror|~rtn:MIRROR-MIRROR].)

obj:COFFIN: Do you know how much a solid gold sarcophagus would weigh? More than 55, that’s for sure.

glob:COFFIN-CURE: Set if you’re *not* carrying the [*obj:COFFIN]. But this is only updated in the [~obj:SOUTH-TEMPLE]’s [code|~rtn:SOUTH-TEMPLE-FCN], because that’s the only room where it matters.
	Interestingly, there’s a comment on the northwest exit of the [~obj:DEEP-CANYON] which mentions this flag. This is left over from the MIT version of Zork, which had several other passages too narrow or steep to navigate with the coffin.

obj:BAT: A reject from *Wumpus!* So said early versions of Zork, including the release I played in 1980. But here the reference has been deleted. Sigh.

obj:TIMBER-ROOM: The timbers are left over from an MIT Zork puzzle in which you had to anchor the rope at the top of the [~obj:SLIDE-ROOM] and lower yourself halfway down. The puzzle was dropped from this version of Zork, but a variation appeared in *Sorcerer*.

rtn:PERFORM: Perform one game action. To simplify a bit, this sets up some globals ([~glob:PRSA], [~glob:PRSI], [~glob:PRSO]). Then it runs the action by invoking various handlers (drawn from the player, the location, the noun, the generic action table...) until one reports that the action is handled.
	Note that there are two complete implementations of `PERFORM` here. We observe that the first one is compiled and the second is ignored, based on the existence of the `PREDGEN` constant. I don’t know what that means, though.

src:GMAIN-143: We run the game’s “every turn” timers if the parser parsed a command ([*glob:P-WON]) and the command was not an out-of-world action (`SCORE`, `SAVE`, etc.)
	Curiously, the `TELL` action also skips the timers. Presumably the timers will run for the NPC’s commanded action. (But Zork 1 has no commandable NPCs, so this doesn’t come up.)

src:GVERBS-769: Jumping is fatal if the room has a down exit which is impassable (with a failure message). This makes sense for, say, [~obj:EAST-OF-CHASM]. It’s a bit odd in the [~obj:KITCHEN] or [~obj:RESERVOIR].

src:GVERBS-1813: This “floating over your head” check has to do with the `FLOAT` spell in Zork 2. That code is not used in Zork 1; that’s why it’s greyed out.

src:GVERBS-1848: Another Zork 2 spell (`FANTASIZE`) which has no effect in Zork 1. See [FLOAT|*src:GVERBS-1813], above.

src:GVERBS-1839: The “holding too many things” message is probabilistic. The more objects you have past seven, the greater the chance of failing to pick up another.
	Note that there’s a *separate* check, a few lines up, for whether “your load is too heavy”. That one is *not* probabilistic.
	I wrote a [blog post|https://blog.zarfhome.com/2017/08/your-load-is-too-heavy-zork-deep-reading] about this a few years back.

rtn:V-WAIT: The `WAIT` command waits three full turns, including the “every turn” timers. But a timer can interrupt this – for example, if the thief shows up and robs you.
